/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-09-20 13:28:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.cloveretl.server.facade.api.listing.RunRecordFilter;
import com.cloveretl.server.InitializationDoneServlet;
import com.cloveretl.server.Msg;
import com.cloveretl.server.facade.api.misc.*;
import com.cloveretl.server.facade.api.*;
import com.cloveretl.server.persistent.NodeStatus.Status;
import com.cloveretl.server.worker.commons.facade.api.*;
import com.cloveretl.server.facade.api.resp.LocalInternalStatus;
import com.cloveretl.server.facade.api.resp.NodeInfo;
import java.util.List;
import java.io.PrintWriter;

public final class accessibilityTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


public boolean isWorkerRunning(LocalInternalStatus status) {
	List<NodeInfo> nodeInfos = status.getClusterNodesInfoList();
	for (NodeInfo info: nodeInfos) {
		if (status.getClusterNodeId().equals(info.getNodeId())) {
			return !info.isNoAvailableWorker();
		}
	}
	return false;
}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.cloveretl.server.worker.commons.facade.api");
    _jspx_imports_packages.add("com.cloveretl.server.facade.api");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.cloveretl.server.facade.api.misc");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("com.cloveretl.server.facade.api.listing.RunRecordFilter");
    _jspx_imports_classes.add("com.cloveretl.server.Msg");
    _jspx_imports_classes.add("com.cloveretl.server.facade.api.resp.LocalInternalStatus");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.springframework.web.context.support.WebApplicationContextUtils");
    _jspx_imports_classes.add("com.cloveretl.server.persistent.NodeStatus.Status");
    _jspx_imports_classes.add("com.cloveretl.server.facade.api.resp.NodeInfo");
    _jspx_imports_classes.add("com.cloveretl.server.InitializationDoneServlet");
    _jspx_imports_classes.add("org.springframework.context.ApplicationContext");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


response.reset();
response.setHeader("Cache-Control", "no-cache; no-store; must-revalidate");
response.setHeader("Strict-Transport-Security", "max-age=63072000; includeSubDomains");
response.setHeader("X-XSS-Protection", "1; mode=block");
response.setHeader("Content-Security-Policy", "default-src 'self'; script-src 'none'; object-src 'none'; base-uri 'none'; img-src 'self'; style-src 'none'");
response.setHeader("X-Content-Type-Options", "nosniff");
response.setHeader("X-Frame-Options", "DENY");
if (Boolean.TRUE.equals(application.getAttribute(InitializationDoneServlet.APP_ATTRIBUTE_KEY_CLOVER_INITIALIZED))) {
	response.setContentType("text/plain");
	ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(application);
	ServerFacade facade = (ServerFacade)ctx.getBean(ServerFacade.BEAN_NAME);
	Status status = facade.getLocalInternalStatus().getNodeRun().getStatus();
	if (Status.READY.equals(status)) {
		if (!isWorkerRunning(facade.getLocalInternalStatus())) {
			response.setStatus(503);
			response.setIntHeader("status-code", 503);
			response.getWriter().write("NO AVAILABLE WORKER");
		} else {
			Response<Boolean> healthCheck = facade.isNodeHealthy();
			if (healthCheck.getBean()) {
				response.setStatus(200);
				response.setIntHeader("status-code", 200);
				response.getWriter().write("OK");
			} else {
				response.setStatus(503);
				response.setIntHeader("status-code", 503);
				PrintWriter writer = response.getWriter();
				for (Message message : healthCheck.getMessages()) {
					writer.write(Msg.getMsg(message) + "\n");
				}
			}
		}
	} else {
		response.setStatus(503);
		response.setIntHeader("status-code", 503);
		/*
		 * When changing response content, be advised that ETL runtime manager checks content
		 * of the response ('SUSPENDED' state).
		 */
		response.getWriter().write(facade.getLocalInternalStatus().getNodeRun().getStatus().toString());
	}
} else {
	Object failure = application.getAttribute(InitializationDoneServlet.APP_ATTRIBUTE_KEY_INITIALIZATION_FAILED_EXCEPTION);
	if (failure instanceof Throwable) {
		response.setStatus(500);
		response.setContentType("text/plain");
		response.setIntHeader("status-code", 500);
		((Throwable)failure).printStackTrace(response.getWriter());
	} else {
		response.setStatus(503);
		response.setContentType("text/plain");
		response.setIntHeader("status-code", 503);
		response.getWriter().write("CloverDX Server not initialized yet");
	}
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
